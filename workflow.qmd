---
title: An efficient reproducible workflow
author: Rob J Hyndman
date: 2024-11-26
toc: false
titlegraphic: bg-13.png
titlecolor: white
format:
  presentation-beamer:
    pdf-engine: pdflatex
include-in-header:
  text: |
    \usepackage{fontawesome}
execute:
  echo: true
---

```{r}
#| label: load-packages
#| include: false
library(knitr)
library(ggplot2)
library(dplyr)
library(tsibble)
library(fable)
```

## Example paper

\placefig{0}{1.1}{height=8cm}{figs/jors.png}

\begin{textblock}{9}(6.5,1.2)
\begin{block}{}
Hyndman RJ, Rostami-Tabar B (2024) Forecasting interrupted time series, \textit{Journal of the Operational Research Society}, in press.\\\small DOI: \href{http://doi.org/10.1080/01605682.2024.2395315}{10.1080/01605682.2024.2395315}
\end{block}
\end{textblock}
\begin{textblock}{9}(6.5,6.2)\fontsize{14}{14}\sf
\begin{alertblock}{}
\href{https://github.com/bahmanrostamitabar/forecasting_interrupted_time_series}{\faicon{github} bahmanrostamitabar/\\\hspace*{1.7ex} forecasting\_interrupted\_time\_series}
\end{alertblock}
\end{textblock}

## Tools

\placefig{4.5}{1.7}{width=1.8cm}{github-mark}
\placefig{3.65}{3.3}{width=3.5cm}{github}
\placefig{8.65}{1.7}{width=3.5cm}{Rlogo}
\placefig{1.15}{4.8}{width=3.5cm}{renvhex}
\placefig{6.15}{4.8}{width=3.5cm}{targets}
\placefig{11.15}{4.8}{width=3.5cm}{quarto}

## Reproducible environments

\placefig{0.3}{1.25}{height = 6.5cm}{figs/renvhex}

\begin{textblock}{9.5}(6.2, 1.3)
\begin{itemize}\tightlist
\item Creates project-specific R environments.
\item Uses a package cache so you are not repeatedly installing the same packages in multiple projects.
\item Does not ensure R itself, system dependencies or the OS are the same.
\item Not a replacement for Docker or Apptainer.
\end{itemize}
\end{textblock}

## Reproducible environments
\placefig{0.3}{1.25}{height = 6.5cm}{figs/renvhex}

\begin{textblock}{9.5}(6.2, 1.3)
\begin{itemize}\tightlist
\item Can use packages from CRAN, Bioconductor, GitHub, Gitlab, Bitbucket, etc.
\item \texttt{renv::init()} to initialize a new project. 
\item \texttt{renv::snapshot()} to save state of project to \texttt{renv.lock}.
\item \texttt{renv::restore()} to restore project as saved in \texttt{renv.lock}.
\end{itemize}
\end{textblock}

## Efficient computational pipelines

\placefig{0.3}{1.25}{height = 6.5cm}{figs/targets}

\begin{textblock}{9.5}(6.2, 1.3)
\begin{itemize}\tightlist
\item Supports a clean, modular, function-oriented programming style.
\item Learns how your pipeline fits together.
\item Runs only the necessary computation.
\item Abstracts files as R objects.
\item Similar to Makefiles, but with R functions.
\end{itemize}
\end{textblock}

## Interconnected tasks

\only<1>{\placefig{0.5}{2}{width=13cm}{figs/workflow.png}}
\only<2>{\placefig{0.5}{2}{width=13cm}{figs/change.png}}
\only<3>{\placefig{0.5}{2}{width=13cm}{figs/downstream.png}}
\only<4>{\placefig{0.5}{1.1}{width=14cm}{figs/decisions.png}}

\begin{textblock}{15}(0.1,8.7)
\textcolor{gray}{\fontsize{7}{7}\sf Image from https://wlandau.github.io/targets-tutorial}
\end{textblock}

## Let a pipeline tool do the work

\fullwidth{figs/pipeline_graph.png}\vspace*{-0.15cm}

* Save time while ensuring computational reproducibility.
* Automatically skip tasks that are already up to date.

## Typical project structure

### no_targets.R
\vspace*{-0.26cm}

```{r}
#| eval: false
library(tidyverse)
library(fable)
source("R/functions.R")
my_data <- read_csv("data/my_data.csv")
my_model <- model_function(my_data)
```

\pause

### _targets.R
\vspace*{-0.26cm}

```{r}
#| eval: false
library(targets)
tar_option_set(packages = c("tidyverse", "fable"))
tar_source() # source all files in R folder
list(
  tar_target(my_file, "data/my_data.csv", format = "file"),
  tar_target(my_data, read_csv(my_file)),
  tar_target(my_model, model_function(my_data))
)
```

## Useful targets commands
\vspace*{-0.3cm}

* `tar_option_set()` to set options.
* `tar_target()` to create a target.
* `tar_source()` to source all files in a folder.
* `tar_make()` to run the pipeline.
* `tar_read(object)` to read a target.
* `tar_load(object)` to load a target.
* `tar_visnetwork()` to visualize the pipeline.

\vspace*{0.2cm}\pause

### Random numbers
\vspace*{-0.15cm}

Each target runs with its own seed based on its name and the global seed from `tar_option_set(seed = ???)`


## Reproducible documents

\placefig{0.3}{1.25}{height = 6.5cm}{figs/quarto}

\begin{textblock}{9.5}(6.2, 1.1)
\fontsize{14}{15}\sf
\begin{itemize}\tightlist
\item Generalization of Rmarkdown (not dependent on R)
\item Supports R, Python, Javascript and Julia chunks by using either `knitr`, `jupyter` or `ObservableJS` engines.
\item Consistent yaml header and chunk options.
\item Many output formats, and many options for customizing format.
\item Uses pandoc templates for extensions
\end{itemize}
\end{textblock}

\placefig{5}{7.3}{width=10cm}{figs/qmd.png}

## Chunk options

### Chunk with regular R code

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
mtcars |>
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```
````

\pause

### Chunk with targets

````{verbatim}
```{r}
#| label: fig-chunklabel
#| fig-caption: My figure
tar_read(my_plot)
```
````

\only<3>{\begin{textblock}{6}(9,.1)
\begin{alertblock}{}
Reference the figure using \texttt{@fig-chunklabel}.
\end{alertblock}
\end{textblock}}

## targets with quarto

```{r}
#| eval: false
library(targets)
library(tarchetypes)
tar_option_set(packages = c("tidyverse", "fable"))
tar_source() # source all files in R folder
list(
  tar_target(my_file, "data/my_data.csv", format = "file"),
  tar_target(my_data, read_csv(my_file)),
  tar_target(my_model, model_function(my_data)),
  tar_quarto(report, "file.qmd", extra_files = "references.bib")
)
```

1. Load `tarchetypes` package for quarto support.
2. Add a quarto target.

## Extensions and templates
\fontsize{13}{17}\sf

* **Quarto extensions** modify and extend functionality. 
  * See <https://quarto.org/docs/extensions/> for a list.
  * They are stored locally, in the `_extensions` folder alongside the qmd document.
* **Quarto templates** are extensions used to define new output formats.
  * **Journal templates** at <https://quarto.org/docs/extensions/listing-journals.html>
  * **Monash templates** at <https://github.com/quarto-monash>

